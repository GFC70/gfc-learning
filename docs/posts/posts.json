[
  {
    "path": "posts/2022-08-23-parameters-record/",
    "title": "Making parameters a record",
    "description": "Using a record to store your worksheet parameters.",
    "author": [
      {
        "name": "Graham Cox",
        "url": {}
      }
    ],
    "date": "2022-08-23",
    "categories": [
      "Excel",
      "Power Query",
      "Tips and Tricks"
    ],
    "contents": "\r\n\r\nContents\r\nThe Problem\r\nThe Solution\r\nUsing\r\nRecords\r\nUsing a value from a record\r\nfield\r\nMultiple\r\nRecords\r\nUsing a value from a\r\nmulti-record list\r\nCreating the parameters\r\nrecord\r\n\r\nConclusion\r\n\r\nThe Problem\r\nIn the last\r\npost we learnt how to create Power Query parameters from named\r\nranges on a worksheet using just one line of M Code. This method is\r\ngreat if the set of queries only have a few parameters that would be\r\nreferences, but what if there were many parameters? There is the\r\npossibility that with a large number of parameters, keep track of them\r\nall in the Power Query Editor could cause issues. What if we could store\r\nthem all in one query?\r\nThe Solution\r\nUsing Records\r\nA record can be thought of as a single vertical column of data. Think\r\nof it as one row from a table of data, but shown vertically. Records in\r\nPower Query can be in tables, lists and can also be created manually if\r\nneeded.\r\nThe structure of a record requires a name for a field within the\r\nrecord and a value to store within that field. All fields that are\r\nwithin a record must be wrapped in square brackets.\r\n[\r\n    Name = \"Mickey Mouse\",\r\n    Role = \"Cartoon Mouse\",\r\n    Name of Spouse = \"Minnie Mouse\"\r\n]\r\nA single record\r\nNote - A field within a record can contain multiple spaces without\r\nthe need to wrap the name within a #“” in a normal power query. Values\r\nassigned to fields must have the value enclosed in quotes if spaces are\r\nin the value.\r\n\r\nUsing a value from a record\r\nfield\r\nTo refer to a field within a record, the name of the query and the\r\nfield name can be used using the syntax of\r\nQueryName[FieldName]\r\nFor the example above, if the query name was Mickey, to\r\nextract each of the values, the M code would be\r\nMickey[Name]\r\n\r\nMickey[Role]\r\n\r\nMickey[Name of Spouse]\r\nMultiple Records\r\nTo create multiple records within one query, wrap the records within\r\ncurly brackets. Using curly brackets converts this query to a list.\r\n\r\nNote: Each record must contain the same field names, although a field\r\ncan contain a null value.\r\n\r\n{\r\n    [\r\n        Name = \"Mickey Mouse\",\r\n        Role = \"Cartoon Mouse\",\r\n        Name of Spouse = \"Minnie Mouse\"\r\n    ],\r\n    [\r\n        Name = \"Donald Duck\",\r\n        Role = \"Cartoon Duck\",\r\n        Name of Spouse = \"Daisy Duck\"\r\n    ]\r\n}\r\nA list of recordsUsing a value from a\r\nmulti-record list\r\nAs Power Query uses zero-based counting, the first record in the\r\nexample above, would have a zero index, the second record would have an\r\nindex of 1, and so on. To extract a value from the multi-record list,\r\nuse the syntax QueryName{Index}[FieldName]\r\nFor the example above, if the query name was Characters,\r\nto extract each of the values for the name fields, the M code would\r\nbe\r\nCharacters{0}[Name]\r\n\r\nCharacters{1}[Name]\r\n\r\nExtracting name from first\r\nrecordCreating the parameters\r\nrecord\r\nUsing the methods above, we can create our record for storing the\r\nparameters by wrapping the three items in square brackets and create a\r\nmulti-field single record query named FileParameters\r\n[\r\n    DataPath = Excel.CurrentWorkbook(){[Name=\"Data_Path\"]}[Content]{0}[Column1] \r\n    meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false],\r\n    \r\n    MainSource = Excel.CurrentWorkbook(){[Name=\"Main_Source\"]}[Content]{0}[Column1] \r\n    meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false],\r\n    \r\n    Lookups = Excel.CurrentWorkbook(){[Name=\"Lookups\"]}[Content]{0}[Column1] \r\n    meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]\r\n]\r\n\r\n\r\nNote: There is no need for an = sign at the start of a query\r\ncontaining a record.\r\n\r\nTo use the parameters above in a query to load data, we call the\r\nFileParameters query and use the relevant fields to extract\r\nthe required data.\r\nlet\r\n    Source = Csv.Document(\r\n        File.Contents(\r\n            FileParameters[DataPath] & FileParameters[MainSource]\r\n            ),\r\n        [Delimiter=\",\", Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]\r\n    )\r\nin\r\n    Source\r\n\r\nConclusion\r\nUsing a parameters query to store values from named ranges on a\r\nworksheet may take a little effort to initially set-up, but I believe\r\nthat outweighs the need to remember how to refer to or look up the\r\nsyntax to extract a named range each time one is needed to be used.\r\nI have also seen vast improvements in the speed of loading data from\r\nworkbooks, either saved locally or on SharePoint sites, from several\r\nminutes to just a few seconds.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-08-23-parameters-record/./parameters-record-overview.jpg",
    "last_modified": "2022-08-23T16:13:25+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-08-15-how-to-parameterise/",
    "title": "How to parameterise",
    "description": "There are many ways to use parameters in Power Query. Here's my favourite method",
    "author": [
      {
        "name": "Graham Cox",
        "url": {}
      }
    ],
    "date": "2022-08-15",
    "categories": [
      "Excel",
      "Power Query",
      "Tips and Tricks"
    ],
    "contents": "\r\n\r\nContents\r\nThe Problem\r\nThe Solution\r\nTL;DR\r\nCreating a Named Range\r\nExtracting the Named Range\r\nvalue\r\nCreate the Power Query\r\nParameter\r\nUsing\r\nthe Parameter\r\n\r\nConclusion\r\n\r\nThe Problem\r\nWhen I first started using Power Query, in one of its very early\r\nversions, file paths to data sources were often hard-coded into each\r\nquery. This would cause issues if the workbook was sent to another user\r\nand the data source was in a folder on my file structure, obviously, the\r\nother user would not have access to my folders!\r\nThe method of using filenames then changed to using a table on a\r\nworksheet, often named Parameters that would list all the\r\nfile paths for all data sources used by Power Query. This method worked\r\nfine until one monster of a workbook was developed. With 17 or so data\r\nsources from a variety of locations, both shared network folders and\r\nSharePoint Document Libraries, the process began to get slower and\r\nslower.\r\nTo extract a file path and name from the Parameters\r\nworksheet would take an age to load in the Power Query Editor window\r\njust to make a change to the query or to refresh it when in the editor\r\nwindow.\r\nA new method was needed.\r\nThe Solution\r\nI had used the New Parameter method from the Power Query\r\nEditor window to add a value to an item, but others using the workbook\r\nare not always confident in using the editor. The solution was to use\r\nExcel Named Ranges and call them in one line of M code.\r\nTL;DR\r\nCreate a new blank query\r\nRename the query to the required name\r\nOpen the Advanced Editor\r\nRemove the M code shown\r\nPaste in the line below, replacing the Data_Path value\r\nto the name of your named range\r\nExcel.CurrentWorkbook(){[Name=\"Data_Path\"]}[Content]{0}[Column1] meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]\r\nClick OK\r\nCreating a Named Range\r\nA named range in Excel can be a single cell or any number of cells\r\nthat have a name assigned to them. Named ranges can be accessed from the\r\ndrop down box to the left of the formula bar.\r\nNamed Range Drop Down ListFor this example, I have created three named ranges, one for each\r\nfile and the data path those files are saved in.\r\nExanple FilesEach cell has been named based on the value in column B of the\r\nworksheet. Spaces have been replaced with underscores where they\r\nexist.\r\nTo create a named range quickly, hit the\r\nCTRL + SHIFT + F3 keys and a dialog box will be shown\r\nasking where the name for the range is. In the example shown, both cells\r\nB2 and C2 have been selected, with cell B2 containing the name to assign\r\nto cell C3\r\nCreate Names from SelectionIf all looks OK in the Create Names from Selection\r\ndialog box, click OK. Selecting cell C3 will shown\r\nData_Path in the Named Range drop down list as shown in the\r\nfirst image above.\r\nExtracting the Named Range\r\nvalue\r\nAlthough I mentioned above that the parameter can be created in one\r\nline of M code, we’ll look at the process of extracting named ranges\r\nfrom a worksheet.\r\n\r\nThe steps in the image above, produce these lines of M code.\r\nlet\r\n    Source = Excel.CurrentWorkbook(),\r\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Name] = \"Data_Path\")),\r\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"Content\"}),\r\n    #\"Expanded Content\" = Table.ExpandTableColumn(#\"Removed Other Columns\", \"Content\", {\"Column1\"}, {\"Column1\"}),\r\n    Column1 = #\"Expanded Content\"{0}[Column1]\r\nin\r\n    Column1\r\nWhat does this code do?\r\nThis will list all the named ranges, sheets names and tables.\r\nSource = Excel.CurrentWorkbook()\r\nThis step will filter the list of named ranges to the required\r\nvalue.\r\n#\"Filtered Rows\" = Table.SelectRows(Source, each ([Name] = \"Data_Path\")),\r\nRemoving the Name column from the table shown in the editor window,\r\nby selecting just the Content column.\r\n#\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"Content\"})\r\nThis step expands the content in the row for the content column.\r\nClicking in a white space area, next to the word Table will\r\ngive a preview of the value(s) stored in that table.\r\n#\"Expanded Content\" = Table.ExpandTableColumn(#\"Removed Other Columns\", \"Content\", {\"Column1\"}, {\"Column1\"})\r\nTable ContentsColumn1 = #\"Expanded Content\"{0}[Column1]\r\nBy right-clicking in a white space area next to the word\r\nTable and select Drill Down to get to the\r\nvalue of the named range.\r\nA lot of steps to get to one value.\r\nCreate the Power Query\r\nParameter\r\nThe important parts of the M code above, that are needed to use as a\r\none line query are:\r\nExcel.CurrentWorkbook()\r\n\r\n[Name] = \"Data_Path\"\r\n\r\n\"Content\"\r\n\r\n{0}[Column1]\r\n\r\nThese values can be combined into one line:\r\nExcel.CurrentWorkbook(){[Name=\"Data_Path\"]}[Content]{0}[Column1]\r\nThe only part now needed is some meta data that lets Power Query know\r\nthat this query is actually a parameter.\r\nmeta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]\r\nCombining these two sets of M code to create the final result.\r\nExcel.CurrentWorkbook(){[Name=\"Data_Path\"]}[Content]{0}[Column1] meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]\r\nUsing the Parameter\r\nTo use the parameter in a query, just replace any previously\r\nhard-coded path or file name. As the query contains the meta data values\r\nat the end, the value will also be available in any drop-down lists for\r\nparameters.\r\nUsing a parameterConclusion\r\nThis method of using named ranges from worksheets has reduced\r\ndevelopment time when creating automated excel workbooks.\r\nThere is also a method for storing many parameters in one query, but\r\nthat can be a post for another day.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-08-15-how-to-parameterise/./CreateParameter1.gif",
    "last_modified": "2022-08-15T18:05:02+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-08-14-2022-08-14-pq-zoom/",
    "title": "Zooming",
    "description": "Zooming the Power Query Editor Window",
    "author": [
      {
        "name": "Graham Cox",
        "url": {}
      }
    ],
    "date": "2022-08-14",
    "categories": [
      "Excel",
      "Power Query",
      "Tips and Tricks"
    ],
    "contents": "\r\nA tip that is often forgotten about is how to zoom in and out when\r\nusing the Power Query Editor. The text showing the data table can appear\r\nsmall to those with visual difficulties. Even for those without\r\ndifficulties, the size of the text can prove problematic at times.\r\nTo increase the size of the text shown in the editor window, use the\r\nkey combinations of\r\nCTRL SHIFT + to zoom in\r\nCTRL SHIFT - to zoom out\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-08-14-2022-08-14-pq-zoom/./zoom.gif",
    "last_modified": "2022-08-14T16:19:56+01:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to GFC Learning",
    "description": "Welcome to my blog, GFC Learning.",
    "author": [
      {
        "name": "Graham Cox",
        "url": {}
      }
    ],
    "date": "2022-08-14",
    "categories": [
      "Welcome",
      "Excel",
      "Power Query",
      "Power Pivot",
      "DAX",
      "VBA",
      "R",
      "Tidyverse",
      "ggplot"
    ],
    "contents": "\r\nExcel question?\r\nProblems with Power Query?\r\nHere I will try to answer some of the more obscure questions you may\r\nhave about using MS Excel and Power Query, PowerPivot, DAX and using the\r\nExcel Data Model and throw some Visual Basic for Applications (VBA) into\r\nthe mix.\r\n\r\n\r\n\r\nI have also recently been learning the programming language\r\nR. There will also be posts using R showing\r\nhow I have been using it for data transformations and data\r\nvisulisations.\r\n\r\nThis website was built completely in R using the distill\r\npackage. Distill is a publication format for scientific and technical\r\nwriting, native to the web.\r\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/welcome/./logo.jpg",
    "last_modified": "2022-08-14T16:17:40+01:00",
    "input_file": {}
  }
]
